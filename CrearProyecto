//***************************************************************************************************************************************
//Proyecto 2 - Electrónica Digital 2 - Santiago Remis 21386
//***************************************************************************************************************************************

////////////LIBRERÍAS/////////////////
#include <Arduino.h>

#include <Wire.h>

#include <Adafruit_NeoPixel.h> 

//Pin del neopixel
#define PIN  33
#define NUMPIXELS  16

//Se configuran las leds
Adafruit_NeoPixel pixels(NUMPIXELS,PIN, NEO_GRB);

//Dirección LM75 I2C
#define LM75_ADDR 0x48

//Variable float para registrar la temperatura
volatile float tempC;

//Variable para controlar que se hace en el neopixel
int control = 0;

//Prototipos de función para las leds
void Strobe(byte red, byte green, byte blue, int StrobeCount, int FlashDelay, int EndPause);
void showStrip();
void colorWipe(byte red, byte green, byte blue, int SpeedDelay);
void setPixel(int Pixel, byte red, byte green, byte blue);
void setAll(byte red, byte green, byte blue);
void CylonBounce(byte red, byte green, byte blue, int EyeSize, int SpeedDelay, int ReturnDelay);
void Fire(int Cooling, int Sparking, int SpeedDelay);
void setPixelHeatColor (int Pixel, byte temperature);
void Sparkle(byte red, byte green, byte blue, int SpeedDelay);
void RunningLights(byte red, byte green, byte blue, int WaveDelay);
void FadeInOut(byte red, byte green, byte blue);

////////////////////////////////SETUP////////////////////////

void setup() {
    //Se inicia la comunicación I2C
    Wire.begin();

    //Empieza la comunicación serial en el puerto 2 con la Tiva-C
    Serial2.begin(115200);

    //Empieza la comunicación serial en el puerto 0 con la computadora
    Serial.begin(115200);

    //Se inician las leds con el brillo deseado
    pixels.begin(); 
    pixels.clear();
    pixels.setBrightness(255);

    pixels.setPixelColor(0, pixels.Color(255,100,150));
    pixels.show();
}

/////////////////////LOOP////////////////////////
void loop() {

  //Se revisa si hay comunicación serial disponible
  if (Serial2.available() > 0) {
    char comand = Serial2.read();
    //Si se recibe una "x"
    if (comand == 'x'){

    //Se hacen 2 ciclos para enseñar que se está midiendo
    for (int i = 0; i < 2; i++) {
      CylonBounce(0xff, 0xff, 0xff, 1, 50, 50);
    }

    //Se inicia la transmisión con el sensor
    Wire.beginTransmission(LM75_ADDR);
    Wire.write(0);
    Wire.endTransmission();
  
    // Se leen 2 bytes de temperatura
    Wire.requestFrom(LM75_ADDR, 2);
    if (Wire.available() >= 2) {
      //Se convierte a grados centígrados
      int tempRaw = Wire.read() << 8 | Wire.read();
      tempC = tempRaw / 256.0;

      //Se imprime la temperatura en el monitor serial
      Serial.print("Temperature: ");
      Serial.print(tempC);
      Serial.println(" °C");

      //Dependiendo de la temperatura se asigna un valor de control
      if (tempC >= 27){
        control = 1;
      }

      else if (tempC <= 25){
        control = 2;
      }

      else {
        control = 3;
      }
    }

    //Se manda el valor de temperatura cómo un string a la tiva C
    char buffer[8];
    dtostrf(tempC, 4, 2, buffer); //Se manda con 2 digitos y dos decimales
    Serial2.print(buffer);
    delay(250);
    }

    //Si se recibe una "y" control para luces
    if (comand == 'y'){
      control = 4;
  }
  }

  //Dependiendo del valor de control se hace diferente animación en las leds.
  if (control == 1) {
    Fire(55,120,50);
  }

  if (control == 2) {
    Sparkle(0xff, 0xff, 0xff, 50);
  }

  if (control == 3) {
    RunningLights(0x00,0xD8,0x2B, 20);
  }

  if (control == 4) {
    FadeInOut(0x8A, 0x2B, 0xE2);
    //Sólo se hace una vez porque es para cuando se guarda un dato en la SD
    control = 0;
  }
}

//////////FUNCIONES DEL NEOPIXEL/////////////////
void Strobe(byte red, byte green, byte blue, int StrobeCount, int FlashDelay, int EndPause){
  for(int j = 0; j < StrobeCount; j++) {
    setAll(red,green,blue);
    showStrip();
    delay(FlashDelay);
    setAll(0,0,0);
    showStrip();
    delay(FlashDelay);
  }
 
 delay(EndPause);
}

void showStrip() {
 #ifdef ADAFRUIT_NEOPIXEL_H 
   // NeoPixel
   pixels.show();
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H
   // FastLED
   FastLED.show();
 #endif
}
void colorWipe(byte red, byte green, byte blue, int SpeedDelay) {
  for(uint16_t i=0; i<NUMPIXELS; i++) {
      setPixel(i, red, green, blue);
      showStrip();
      delay(SpeedDelay);
  }
}

void setPixel(int Pixel, byte red, byte green, byte blue) {
 #ifdef ADAFRUIT_NEOPIXEL_H 
   // NeoPixel
   pixels.setPixelColor(Pixel, pixels.Color(red, green, blue));
 #endif
 #ifndef ADAFRUIT_NEOPIXEL_H 
   // FastLED
   leds[Pixel].r = red;
   leds[Pixel].g = green;
   leds[Pixel].b = blue;
 #endif
}

void setAll(byte red, byte green, byte blue) {
  for(int i = 0; i < NUMPIXELS; i++ ) {
    setPixel(i, red, green, blue); 
  }
  showStrip();
}

/////////////////////EFECTO CICLON (cargando)///////////////////////
void CylonBounce(byte red, byte green, byte blue, int EyeSize, int SpeedDelay, int ReturnDelay){

  for(int i = 0; i < NUMPIXELS-EyeSize-2; i++) {
    setAll(0,0,0);
    setPixel(i, red/10, green/10, blue/10);
    for(int j = 1; j <= EyeSize; j++) {
      setPixel(i+j, red, green, blue);
    }
    setPixel(i+EyeSize+1, red/10, green/10, blue/10);
    showStrip();
    delay(SpeedDelay);
  }

  delay(ReturnDelay);

  for(int i = NUMPIXELS-EyeSize-2; i > 0; i--) {
    setAll(0,0,0);
    setPixel(i, red/10, green/10, blue/10);
    for(int j = 1; j <= EyeSize; j++) {
      setPixel(i+j, red, green, blue);
    }
    setPixel(i+EyeSize+1, red/10, green/10, blue/10);
    showStrip();
    delay(SpeedDelay);
  }
 
  delay(ReturnDelay);
}

//////////EFECTO FIRE (CALIENTE)/////////////////

void Fire(int Cooling, int Sparking, int SpeedDelay) {
  static byte heat[NUMPIXELS];
  int cooldown;
 
  // Step 1.  Cool down every cell a little
  for( int i = 0; i < NUMPIXELS; i++) {
    cooldown = random(0, ((Cooling * 10) / NUMPIXELS) + 2);
   
    if(cooldown>heat[i]) {
      heat[i]=0;
    } else {
      heat[i]=heat[i]-cooldown;
    }
  }
 
  // Step 2.  Heat from each cell drifts 'up' and diffuses a little
  for( int k= NUMPIXELS - 1; k >= 2; k--) {
    heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
  }
   
  // Step 3.  Randomly ignite new 'sparks' near the bottom
  if( random(255) < Sparking ) {
    int y = random(7);
    heat[y] = heat[y] + random(160,255);
    //heat[y] = random(160,255);
  }

  // Step 4.  Convert heat to LED colors
  for( int j = 0; j < NUMPIXELS; j++) {
    setPixelHeatColor(j, heat[j] );
  }

  showStrip();
  delay(SpeedDelay);
}

void setPixelHeatColor (int Pixel, byte temperature) {
  // Scale 'heat' down from 0-255 to 0-191
  byte t192 = round((temperature/255.0)*191);
 
  // calculate ramp up from
  byte heatramp = t192 & 0x3F; // 0..63
  heatramp <<= 2; // scale up to 0..252
 
  // figure out which third of the spectrum we're in:
  if( t192 > 0x80) {                     // hottest
    setPixel(Pixel, 255, 255, heatramp);
  } else if( t192 > 0x40 ) {             // middle
    setPixel(Pixel, 255, heatramp, 0);
  } else {                               // coolest
    setPixel(Pixel, heatramp, 0, 0);
  }
}

//////FUNCION EFECTO SPARKLE (FRIO)//////////////
void Sparkle(byte red, byte green, byte blue, int SpeedDelay) {
  int Pixel = random(NUMPIXELS);
  setPixel(Pixel,red,green,blue);
  showStrip();
  delay(SpeedDelay);
  setPixel(Pixel,0,0,0);
}

//////////////////EFECTO RUNNING LIGHTS (TIBIO)//////////////////

void RunningLights(byte red, byte green, byte blue, int WaveDelay) {
  int Position=0;
 
  for(int j=0; j<NUMPIXELS*2; j++)
  {
      Position++; // = 0; //Position + Rate;
      for(int i=0; i<NUMPIXELS; i++) {
        // sine wave, 3 offset waves make a rainbow!
        //float level = sin(i+Position) * 127 + 128;
        //setPixel(i,level,0,0);
        //float level = sin(i+Position) * 127 + 128;
        setPixel(i,((sin(i+Position) * 127 + 128)/255)*red,
                   ((sin(i+Position) * 127 + 128)/255)*green,
                   ((sin(i+Position) * 127 + 128)/255)*blue);
      }
     
      showStrip();
      delay(WaveDelay);
  }
}

void FadeInOut(byte red, byte green, byte blue){
  float r, g, b;
     
  for(int k = 0; k < 256; k=k+1) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }
     
  for(int k = 255; k >= 0; k=k-2) {
    r = (k/256.0)*red;
    g = (k/256.0)*green;
    b = (k/256.0)*blue;
    setAll(r,g,b);
    showStrip();
  }
}

